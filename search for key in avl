#include <stdio.h>
#include <stdlib.h>

struct Node {
    int key;
    struct Node *left;
    struct Node *right;
    int height;
};

int max(int a, int b) {
    return (a > b) ? a : b;
}

int height(struct Node *N) {
    if (N == NULL)
        return 0;
    return N->height;
}

struct Node *newNode(int key) {
    struct Node *node = (struct Node *)malloc(sizeof(struct Node));
    node->key = key;
    node->left = NULL;
    node->right = NULL;
    node->height = 1;
    return node;
}

struct Node *search(struct Node *root, int key) {
    if (root == NULL || root->key == key)
        return root;

    if (root->key < key)
        return search(root->right, key);

    return search(root->left, key);
}

void inorder(struct Node *root) {
    if (root != NULL) {
        inorder(root->left);
        printf("%d ", root->key);
        inorder(root->right);
    }
}

int main() {
    struct Node *root = NULL;

    root = newNode(9);
    root->left = newNode(5);
    root->right = newNode(10);
    root->left->left = newNode(0);
    root->left->right = newNode(6);
    root->right->right = newNode(11);
    root->left->left->left = newNode(-1);
    root->left->left->right = newNode(1);
    root->left->right->right = newNode(2);

    printf("search traversal of AVL tree:\n");
    inorder(root);
    printf("\n");

    int key_to_search = 10;
    struct Node *result = search(root, key_to_search);
    if (result != NULL)
        printf("%d found in AVL tree.\n", key_to_search);
    else
        printf("%d not found in AVL tree.\n", key_to_search);

    return 0;
}
